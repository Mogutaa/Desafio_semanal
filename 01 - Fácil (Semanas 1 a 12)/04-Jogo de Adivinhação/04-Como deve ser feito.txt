04 - Jogo de Adivinhação
Objetivo do Projeto
O objetivo desse projeto é criar um jogo onde o computador escolhe um número aleatório e o usuário tem que adivinhar qual é esse número. O jogo deve dar dicas ao usuário, como "muito alto" ou "muito baixo", até que o usuário acerte o número. Esse projeto é uma boa maneira de aprender como lidar com entradas do usuário, loops e gerar números aleatórios.

Especificações do Projeto
Funcionalidades:

O computador gera um número aleatório dentro de um intervalo definido (por exemplo, entre 1 e 100).
O usuário deve adivinhar qual é o número gerado.
O jogo deve informar se a tentativa do usuário foi muito alta ou muito baixa.
O jogo deve contar o número de tentativas feitas até o usuário acertar o número.
Quando o usuário acertar, o programa deve exibir uma mensagem de vitória, indicando o número de tentativas feitas.
Entrada do Usuário:

O usuário deve inserir um número e, após cada tentativa, o programa informa se o número está muito alto, muito baixo ou correto.
O programa deve permitir várias tentativas até que o número correto seja adivinhado.
Saída:

O programa deve informar se a tentativa foi "muito alta", "muito baixa" ou "correta".
Quando o usuário acertar, o programa deve mostrar uma mensagem de vitória, como "Parabéns! Você acertou o número em X tentativas."
Estrutura do Projeto
Gerar um Número Aleatório:

Usar o módulo random do Python para gerar um número aleatório. O número deve ser gerado dentro de um intervalo que pode ser definido (por exemplo, entre 1 e 100).
Exemplo de código:
python

import random
numero_aleatorio = random.randint(1, 100)
Solicitar a Entrada do Usuário:

O programa deve pedir ao usuário para adivinhar o número. O valor inserido pelo usuário deve ser convertido para um número inteiro (com int()).
Exemplo:
python

palpite = int(input("Adivinhe o número entre 1 e 100: "))
Verificar a Entrada:

O programa deve comparar o palpite do usuário com o número aleatório.
Se o palpite for muito alto, o programa deve informar "muito alto".
Se o palpite for muito baixo, o programa deve informar "muito baixo".
Se o palpite for correto, o programa deve parabenizar o usuário e mostrar o número de tentativas.
Repetir até Acertar:

O programa deve continuar pedindo palpites até o usuário acertar o número.
O loop while pode ser usado para garantir que o jogo continue até o número ser adivinhado.
Contar o Número de Tentativas:

O programa deve contar quantas tentativas o usuário fez para adivinhar o número. Para isso, você pode usar uma variável que será incrementada a cada tentativa.
Encerrar o Jogo:

Quando o usuário acertar o número, o programa deve mostrar uma mensagem de sucesso, dizendo o número de tentativas feitas, e perguntar se o usuário quer jogar novamente ou encerrar.
Passos para Implementação
Importar o módulo random:

O primeiro passo é importar o módulo random para gerar números aleatórios. Em seguida, gere o número aleatório que o usuário precisará adivinhar.
Solicitar o Palpite do Usuário:

Em seguida, solicite que o usuário insira seu palpite. O valor inserido deve ser convertido para um número inteiro.
Verificar o Palpite:

Compare o palpite do usuário com o número aleatório:
Se o palpite for menor, avise "muito baixo".
Se o palpite for maior, avise "muito alto".
Se o palpite for igual, avise "correto" e parabenize o jogador.
Repetir até Acertar:

Use um loop while que só termina quando o usuário acertar o número. O loop pode se parecer com isso:
python

while palpite != numero_aleatorio:
    palpite = int(input("Tente novamente: "))
    # Comparar e dar feedback
Contar as Tentativas:

Crie uma variável, como tentativas, que começa em 0 e é incrementada a cada palpite. Exiba esse valor quando o usuário acertar o número.
Opção de Rejogar:

Após acertar, o programa deve perguntar se o usuário quer jogar novamente ou encerrar o jogo. Isso pode ser feito usando input() para capturar a resposta do usuário.
Aprendizados e Conceitos Chave
Módulo random:

Esse projeto permite aprender a usar o módulo random para gerar números aleatórios. Esse é um conceito útil em muitos outros projetos, como jogos ou simulações.
Controle de Fluxo (Loops e Condicionais):

O uso de loops while para repetir ações até que uma condição seja satisfeita.
O uso de condicionais (if, elif, else) para verificar se o palpite do usuário está correto ou se precisa de ajustes.
Interação com o Usuário:

Como capturar entradas do usuário com input() e mostrar saídas com print().
Como dar feedback ao usuário de forma clara, indicando se o palpite foi muito alto ou muito baixo.
Contagem e Acúmulo de Tentativas:

Como contar e acumular o número de tentativas que o usuário fez, um conceito muito importante em muitos jogos e sistemas.
Extensões e Melhorias
Limitar o Número de Tentativas:

Adicionar um limite de tentativas para tornar o jogo mais desafiador. O programa pode terminar se o usuário atingir o número máximo de tentativas sem acertar.
Usar Níveis de Dificuldade:

Permitir ao usuário escolher o nível de dificuldade, onde os limites do número aleatório podem ser alterados (por exemplo, 1-100 para fácil, 1-1000 para difícil).
Melhorar a Interface:

Adicionar uma interface gráfica simples usando Tkinter, onde o usuário pode clicar em botões para enviar suas respostas em vez de usar o teclado.
Histórico de Jogadas:

Manter um histórico de tentativas e números para que o usuário veja sua evolução em jogos anteriores.